/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetObjectivesIdParams,
  GetObjectivesParams,
  ObjectiveListResponse,
  ObjectiveRequest,
  ObjectiveResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getObjectives = (
  params?: GetObjectivesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ObjectiveListResponse>({ url: `/objectives`, method: "get", params, signal }, options);
};

export const getGetObjectivesQueryKey = (params?: GetObjectivesParams) => {
  return [`/objectives`, ...(params ? [params] : [])] as const;
};

export const getGetObjectivesQueryOptions = <
  TData = Awaited<ReturnType<typeof getObjectives>>,
  TError = ErrorType<Error>,
>(
  params?: GetObjectivesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getObjectives>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetObjectivesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getObjectives>>> = ({ signal }) =>
    getObjectives(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getObjectives>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetObjectivesQueryResult = NonNullable<Awaited<ReturnType<typeof getObjectives>>>;
export type GetObjectivesQueryError = ErrorType<Error>;

export const useGetObjectives = <
  TData = Awaited<ReturnType<typeof getObjectives>>,
  TError = ErrorType<Error>,
>(
  params?: GetObjectivesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getObjectives>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetObjectivesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postObjectives = (
  objectiveRequest: ObjectiveRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ObjectiveResponse>(
    {
      url: `/objectives`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: objectiveRequest,
    },
    options,
  );
};

export const getPostObjectivesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postObjectives>>,
    TError,
    { data: ObjectiveRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postObjectives>>,
  TError,
  { data: ObjectiveRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postObjectives>>,
    { data: ObjectiveRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postObjectives(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostObjectivesMutationResult = NonNullable<Awaited<ReturnType<typeof postObjectives>>>;
export type PostObjectivesMutationBody = ObjectiveRequest;
export type PostObjectivesMutationError = ErrorType<Error>;

export const usePostObjectives = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postObjectives>>,
    TError,
    { data: ObjectiveRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostObjectivesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getObjectivesId = (
  id: number,
  params?: GetObjectivesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ObjectiveResponse>(
    { url: `/objectives/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetObjectivesIdQueryKey = (id: number, params?: GetObjectivesIdParams) => {
  return [`/objectives/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetObjectivesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getObjectivesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetObjectivesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getObjectivesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetObjectivesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getObjectivesId>>> = ({ signal }) =>
    getObjectivesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getObjectivesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetObjectivesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getObjectivesId>>>;
export type GetObjectivesIdQueryError = ErrorType<Error>;

export const useGetObjectivesId = <
  TData = Awaited<ReturnType<typeof getObjectivesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetObjectivesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getObjectivesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetObjectivesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putObjectivesId = (
  id: number,
  objectiveRequest: ObjectiveRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ObjectiveResponse>(
    {
      url: `/objectives/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: objectiveRequest,
    },
    options,
  );
};

export const getPutObjectivesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putObjectivesId>>,
    TError,
    { id: number; data: ObjectiveRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putObjectivesId>>,
  TError,
  { id: number; data: ObjectiveRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putObjectivesId>>,
    { id: number; data: ObjectiveRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putObjectivesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutObjectivesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putObjectivesId>>
>;
export type PutObjectivesIdMutationBody = ObjectiveRequest;
export type PutObjectivesIdMutationError = ErrorType<Error>;

export const usePutObjectivesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putObjectivesId>>,
    TError,
    { id: number; data: ObjectiveRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutObjectivesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteObjectivesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/objectives/${id}`, method: "delete" }, options);
};

export const getDeleteObjectivesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteObjectivesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteObjectivesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteObjectivesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteObjectivesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteObjectivesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteObjectivesId>>
>;

export type DeleteObjectivesIdMutationError = ErrorType<Error>;

export const useDeleteObjectivesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteObjectivesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteObjectivesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
