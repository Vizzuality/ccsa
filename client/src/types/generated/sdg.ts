/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

import type {
  Error,
  GetSdgsIdParams,
  GetSdgsParams,
  SdgListResponse,
  SdgRequest,
  SdgResponse,
} from "./strapi.schemas";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getSdgs = (
  params?: GetSdgsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<SdgListResponse>({ url: `/sdgs`, method: "get", params, signal }, options);
};

export const getGetSdgsQueryKey = (params?: GetSdgsParams) => {
  return [`/sdgs`, ...(params ? [params] : [])] as const;
};

export const getGetSdgsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSdgs>>,
  TError = ErrorType<Error>,
>(
  params?: GetSdgsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSdgs>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSdgsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSdgs>>> = ({ signal }) =>
    getSdgs(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSdgs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSdgsQueryResult = NonNullable<Awaited<ReturnType<typeof getSdgs>>>;
export type GetSdgsQueryError = ErrorType<Error>;

export const useGetSdgs = <TData = Awaited<ReturnType<typeof getSdgs>>, TError = ErrorType<Error>>(
  params?: GetSdgsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSdgs>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSdgsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postSdgs = (sdgRequest: SdgRequest, options?: SecondParameter<typeof API>) => {
  return API<SdgResponse>(
    {
      url: `/sdgs`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: sdgRequest,
    },
    options,
  );
};

export const getPostSdgsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSdgs>>,
    TError,
    { data: SdgRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSdgs>>,
  TError,
  { data: SdgRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSdgs>>, { data: SdgRequest }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return postSdgs(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSdgsMutationResult = NonNullable<Awaited<ReturnType<typeof postSdgs>>>;
export type PostSdgsMutationBody = SdgRequest;
export type PostSdgsMutationError = ErrorType<Error>;

export const usePostSdgs = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSdgs>>,
    TError,
    { data: SdgRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostSdgsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getSdgsId = (
  id: number,
  params?: GetSdgsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<SdgResponse>({ url: `/sdgs/${id}`, method: "get", params, signal }, options);
};

export const getGetSdgsIdQueryKey = (id: number, params?: GetSdgsIdParams) => {
  return [`/sdgs/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetSdgsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSdgsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSdgsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSdgsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSdgsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSdgsId>>> = ({ signal }) =>
    getSdgsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSdgsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSdgsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSdgsId>>>;
export type GetSdgsIdQueryError = ErrorType<Error>;

export const useGetSdgsId = <
  TData = Awaited<ReturnType<typeof getSdgsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSdgsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSdgsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSdgsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putSdgsId = (
  id: number,
  sdgRequest: SdgRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<SdgResponse>(
    {
      url: `/sdgs/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: sdgRequest,
    },
    options,
  );
};

export const getPutSdgsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSdgsId>>,
    TError,
    { id: number; data: SdgRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putSdgsId>>,
  TError,
  { id: number; data: SdgRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putSdgsId>>,
    { id: number; data: SdgRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putSdgsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutSdgsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSdgsId>>>;
export type PutSdgsIdMutationBody = SdgRequest;
export type PutSdgsIdMutationError = ErrorType<Error>;

export const usePutSdgsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSdgsId>>,
    TError,
    { id: number; data: SdgRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutSdgsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteSdgsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/sdgs/${id}`, method: "delete" }, options);
};

export const getDeleteSdgsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSdgsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSdgsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSdgsId>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteSdgsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSdgsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSdgsId>>>;

export type DeleteSdgsIdMutationError = ErrorType<Error>;

export const useDeleteSdgsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSdgsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteSdgsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
