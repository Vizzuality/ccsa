/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetWorldCountriesIdParams,
  GetWorldCountriesParams,
  WorldCountryListResponse,
  WorldCountryRequest,
  WorldCountryResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getWorldCountries = (
  params?: GetWorldCountriesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<WorldCountryListResponse>(
    { url: `/world-countries`, method: "get", params, signal },
    options,
  );
};

export const getGetWorldCountriesQueryKey = (params?: GetWorldCountriesParams) => {
  return [`/world-countries`, ...(params ? [params] : [])] as const;
};

export const getGetWorldCountriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorldCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetWorldCountriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorldCountries>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorldCountriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorldCountries>>> = ({ signal }) =>
    getWorldCountries(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorldCountries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWorldCountriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorldCountries>>
>;
export type GetWorldCountriesQueryError = ErrorType<Error>;

export const useGetWorldCountries = <
  TData = Awaited<ReturnType<typeof getWorldCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetWorldCountriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorldCountries>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorldCountriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postWorldCountries = (
  worldCountryRequest: WorldCountryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<WorldCountryResponse>(
    {
      url: `/world-countries`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: worldCountryRequest,
    },
    options,
  );
};

export const getPostWorldCountriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorldCountries>>,
    TError,
    { data: WorldCountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorldCountries>>,
  TError,
  { data: WorldCountryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorldCountries>>,
    { data: WorldCountryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postWorldCountries(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWorldCountriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorldCountries>>
>;
export type PostWorldCountriesMutationBody = WorldCountryRequest;
export type PostWorldCountriesMutationError = ErrorType<Error>;

export const usePostWorldCountries = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorldCountries>>,
    TError,
    { data: WorldCountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostWorldCountriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getWorldCountriesId = (
  id: number,
  params?: GetWorldCountriesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<WorldCountryResponse>(
    { url: `/world-countries/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetWorldCountriesIdQueryKey = (id: number, params?: GetWorldCountriesIdParams) => {
  return [`/world-countries/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetWorldCountriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorldCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetWorldCountriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorldCountriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorldCountriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorldCountriesId>>> = ({ signal }) =>
    getWorldCountriesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorldCountriesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWorldCountriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorldCountriesId>>
>;
export type GetWorldCountriesIdQueryError = ErrorType<Error>;

export const useGetWorldCountriesId = <
  TData = Awaited<ReturnType<typeof getWorldCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetWorldCountriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorldCountriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorldCountriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putWorldCountriesId = (
  id: number,
  worldCountryRequest: WorldCountryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<WorldCountryResponse>(
    {
      url: `/world-countries/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: worldCountryRequest,
    },
    options,
  );
};

export const getPutWorldCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putWorldCountriesId>>,
    TError,
    { id: number; data: WorldCountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putWorldCountriesId>>,
  TError,
  { id: number; data: WorldCountryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putWorldCountriesId>>,
    { id: number; data: WorldCountryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putWorldCountriesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutWorldCountriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putWorldCountriesId>>
>;
export type PutWorldCountriesIdMutationBody = WorldCountryRequest;
export type PutWorldCountriesIdMutationError = ErrorType<Error>;

export const usePutWorldCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putWorldCountriesId>>,
    TError,
    { id: number; data: WorldCountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutWorldCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteWorldCountriesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/world-countries/${id}`, method: "delete" }, options);
};

export const getDeleteWorldCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorldCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorldCountriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorldCountriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteWorldCountriesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWorldCountriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorldCountriesId>>
>;

export type DeleteWorldCountriesIdMutationError = ErrorType<Error>;

export const useDeleteWorldCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorldCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteWorldCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
