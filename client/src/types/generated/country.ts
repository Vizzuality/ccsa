/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CountryListResponse,
  CountryRequest,
  CountryResponse,
  Error,
  GetCountriesParams,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getCountries = (
  params?: GetCountriesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CountryListResponse>({ url: `/countries`, method: "get", params, signal }, options);
};

export const getGetCountriesQueryKey = (params?: GetCountriesParams) => {
  return [`/countries`, ...(params ? [params] : [])] as const;
};

export const getGetCountriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetCountriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountries>>> = ({ signal }) =>
    getCountries(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCountries>>>;
export type GetCountriesQueryError = ErrorType<Error>;

export const useGetCountries = <
  TData = Awaited<ReturnType<typeof getCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetCountriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCountries = (
  countryRequest: CountryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CountryResponse>(
    {
      url: `/countries`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: countryRequest,
    },
    options,
  );
};

export const getPostCountriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountries>>,
    TError,
    { data: CountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCountries>>,
  TError,
  { data: CountryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCountries>>,
    { data: CountryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCountries(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCountriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCountries>>>;
export type PostCountriesMutationBody = CountryRequest;
export type PostCountriesMutationError = ErrorType<Error>;

export const usePostCountries = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountries>>,
    TError,
    { data: CountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostCountriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCountriesId = (
  id: number,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CountryResponse>({ url: `/countries/${id}`, method: "get", signal }, options);
};

export const getGetCountriesIdQueryKey = (id: number) => {
  return [`/countries/${id}`] as const;
};

export const getGetCountriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountriesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountriesId>>> = ({ signal }) =>
    getCountriesId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountriesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCountriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCountriesId>>>;
export type GetCountriesIdQueryError = ErrorType<Error>;

export const useGetCountriesId = <
  TData = Awaited<ReturnType<typeof getCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountriesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCountriesId = (
  id: number,
  countryRequest: CountryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CountryResponse>(
    {
      url: `/countries/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: countryRequest,
    },
    options,
  );
};

export const getPutCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountriesId>>,
    TError,
    { id: number; data: CountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCountriesId>>,
  TError,
  { id: number; data: CountryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCountriesId>>,
    { id: number; data: CountryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCountriesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCountriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCountriesId>>>;
export type PutCountriesIdMutationBody = CountryRequest;
export type PutCountriesIdMutationError = ErrorType<Error>;

export const usePutCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountriesId>>,
    TError,
    { id: number; data: CountryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCountriesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/countries/${id}`, method: "delete" }, options);
};

export const getDeleteCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCountriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCountriesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCountriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCountriesId>>
>;

export type DeleteCountriesIdMutationError = ErrorType<Error>;

export const useDeleteCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
