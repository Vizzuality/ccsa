/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetPillarsIdParams,
  GetPillarsParams,
  PillarListResponse,
  PillarRequest,
  PillarResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getPillars = (
  params?: GetPillarsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<PillarListResponse>({ url: `/pillars`, method: "get", params, signal }, options);
};

export const getGetPillarsQueryKey = (params?: GetPillarsParams) => {
  return [`/pillars`, ...(params ? [params] : [])] as const;
};

export const getGetPillarsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPillars>>,
  TError = ErrorType<Error>,
>(
  params?: GetPillarsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPillars>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPillarsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPillars>>> = ({ signal }) =>
    getPillars(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPillars>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPillarsQueryResult = NonNullable<Awaited<ReturnType<typeof getPillars>>>;
export type GetPillarsQueryError = ErrorType<Error>;

export const useGetPillars = <
  TData = Awaited<ReturnType<typeof getPillars>>,
  TError = ErrorType<Error>,
>(
  params?: GetPillarsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPillars>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPillarsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postPillars = (
  pillarRequest: PillarRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<PillarResponse>(
    {
      url: `/pillars`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: pillarRequest,
    },
    options,
  );
};

export const getPostPillarsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPillars>>,
    TError,
    { data: PillarRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPillars>>,
  TError,
  { data: PillarRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPillars>>,
    { data: PillarRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postPillars(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPillarsMutationResult = NonNullable<Awaited<ReturnType<typeof postPillars>>>;
export type PostPillarsMutationBody = PillarRequest;
export type PostPillarsMutationError = ErrorType<Error>;

export const usePostPillars = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPillars>>,
    TError,
    { data: PillarRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostPillarsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPillarsId = (
  id: number,
  params?: GetPillarsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<PillarResponse>({ url: `/pillars/${id}`, method: "get", params, signal }, options);
};

export const getGetPillarsIdQueryKey = (id: number, params?: GetPillarsIdParams) => {
  return [`/pillars/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetPillarsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPillarsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPillarsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPillarsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPillarsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPillarsId>>> = ({ signal }) =>
    getPillarsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPillarsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPillarsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPillarsId>>>;
export type GetPillarsIdQueryError = ErrorType<Error>;

export const useGetPillarsId = <
  TData = Awaited<ReturnType<typeof getPillarsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPillarsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPillarsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPillarsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putPillarsId = (
  id: number,
  pillarRequest: PillarRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<PillarResponse>(
    {
      url: `/pillars/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: pillarRequest,
    },
    options,
  );
};

export const getPutPillarsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPillarsId>>,
    TError,
    { id: number; data: PillarRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPillarsId>>,
  TError,
  { id: number; data: PillarRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPillarsId>>,
    { id: number; data: PillarRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPillarsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPillarsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPillarsId>>>;
export type PutPillarsIdMutationBody = PillarRequest;
export type PutPillarsIdMutationError = ErrorType<Error>;

export const usePutPillarsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPillarsId>>,
    TError,
    { id: number; data: PillarRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutPillarsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deletePillarsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/pillars/${id}`, method: "delete" }, options);
};

export const getDeletePillarsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePillarsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePillarsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePillarsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePillarsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePillarsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePillarsId>>
>;

export type DeletePillarsIdMutationError = ErrorType<Error>;

export const useDeletePillarsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePillarsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeletePillarsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
