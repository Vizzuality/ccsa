/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import type { JsonToCsvBody, UploadCsv200Item, UploadCsvBody } from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Upload a CSV file and parse it
 */
export const uploadCsv = (uploadCsvBody: UploadCsvBody, options?: SecondParameter<typeof API>) => {
  const formData = new FormData();
  formData.append("files", uploadCsvBody.files);

  return API<UploadCsv200Item[]>(
    {
      url: `/csv/parse-csv`,
      method: "post",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getUploadCsvMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadCsv>>,
    TError,
    { data: UploadCsvBody },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadCsv>>,
  TError,
  { data: UploadCsvBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadCsv>>,
    { data: UploadCsvBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadCsv(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadCsvMutationResult = NonNullable<Awaited<ReturnType<typeof uploadCsv>>>;
export type UploadCsvMutationBody = UploadCsvBody;
export type UploadCsvMutationError = ErrorType<unknown>;

/**
 * @summary Upload a CSV file and parse it
 */
export const useUploadCsv = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadCsv>>,
    TError,
    { data: UploadCsvBody },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getUploadCsvMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Convert JSON to CSV
 */
export const jsonToCsv = (jsonToCsvBody: JsonToCsvBody, options?: SecondParameter<typeof API>) => {
  return API<string>(
    {
      url: `/csv/json-to-csv`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: jsonToCsvBody,
    },
    options,
  );
};

export const getJsonToCsvMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jsonToCsv>>,
    TError,
    { data: JsonToCsvBody },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jsonToCsv>>,
  TError,
  { data: JsonToCsvBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jsonToCsv>>,
    { data: JsonToCsvBody }
  > = (props) => {
    const { data } = props ?? {};

    return jsonToCsv(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JsonToCsvMutationResult = NonNullable<Awaited<ReturnType<typeof jsonToCsv>>>;
export type JsonToCsvMutationBody = JsonToCsvBody;
export type JsonToCsvMutationError = ErrorType<unknown>;

/**
 * @summary Convert JSON to CSV
 */
export const useJsonToCsv = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jsonToCsv>>,
    TError,
    { data: JsonToCsvBody },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getJsonToCsvMutationOptions(options);

  return useMutation(mutationOptions);
};
