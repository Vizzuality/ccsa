/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CollaboratorEditSuggestionListResponse,
  CollaboratorEditSuggestionRequest,
  CollaboratorEditSuggestionResponse,
  Error,
  GetCollaboratorEditSuggestionsParams,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getCollaboratorEditSuggestions = (
  params?: GetCollaboratorEditSuggestionsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CollaboratorEditSuggestionListResponse>(
    { url: `/collaborator-edit-suggestions`, method: "get", params, signal },
    options,
  );
};

export const getGetCollaboratorEditSuggestionsQueryKey = (
  params?: GetCollaboratorEditSuggestionsParams,
) => {
  return [`/collaborator-edit-suggestions`, ...(params ? [params] : [])] as const;
};

export const getGetCollaboratorEditSuggestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>,
  TError = ErrorType<Error>,
>(
  params?: GetCollaboratorEditSuggestionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollaboratorEditSuggestionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>> = ({
    signal,
  }) => getCollaboratorEditSuggestions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCollaboratorEditSuggestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>
>;
export type GetCollaboratorEditSuggestionsQueryError = ErrorType<Error>;

export const useGetCollaboratorEditSuggestions = <
  TData = Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>,
  TError = ErrorType<Error>,
>(
  params?: GetCollaboratorEditSuggestionsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCollaboratorEditSuggestions>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCollaboratorEditSuggestionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCollaboratorEditSuggestions = (
  collaboratorEditSuggestionRequest: CollaboratorEditSuggestionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CollaboratorEditSuggestionResponse>(
    {
      url: `/collaborator-edit-suggestions`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: collaboratorEditSuggestionRequest,
    },
    options,
  );
};

export const getPostCollaboratorEditSuggestionsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCollaboratorEditSuggestions>>,
    TError,
    { data: CollaboratorEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCollaboratorEditSuggestions>>,
  TError,
  { data: CollaboratorEditSuggestionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCollaboratorEditSuggestions>>,
    { data: CollaboratorEditSuggestionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCollaboratorEditSuggestions(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCollaboratorEditSuggestionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCollaboratorEditSuggestions>>
>;
export type PostCollaboratorEditSuggestionsMutationBody = CollaboratorEditSuggestionRequest;
export type PostCollaboratorEditSuggestionsMutationError = ErrorType<Error>;

export const usePostCollaboratorEditSuggestions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCollaboratorEditSuggestions>>,
    TError,
    { data: CollaboratorEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostCollaboratorEditSuggestionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCollaboratorEditSuggestionsId = (
  id: number,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CollaboratorEditSuggestionResponse>(
    { url: `/collaborator-edit-suggestions/${id}`, method: "get", signal },
    options,
  );
};

export const getGetCollaboratorEditSuggestionsIdQueryKey = (id: number) => {
  return [`/collaborator-edit-suggestions/${id}`] as const;
};

export const getGetCollaboratorEditSuggestionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollaboratorEditSuggestionsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>> = ({
    signal,
  }) => getCollaboratorEditSuggestionsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCollaboratorEditSuggestionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>
>;
export type GetCollaboratorEditSuggestionsIdQueryError = ErrorType<Error>;

export const useGetCollaboratorEditSuggestionsId = <
  TData = Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCollaboratorEditSuggestionsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCollaboratorEditSuggestionsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCollaboratorEditSuggestionsId = (
  id: number,
  collaboratorEditSuggestionRequest: CollaboratorEditSuggestionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CollaboratorEditSuggestionResponse>(
    {
      url: `/collaborator-edit-suggestions/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: collaboratorEditSuggestionRequest,
    },
    options,
  );
};

export const getPutCollaboratorEditSuggestionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCollaboratorEditSuggestionsId>>,
    TError,
    { id: number; data: CollaboratorEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCollaboratorEditSuggestionsId>>,
  TError,
  { id: number; data: CollaboratorEditSuggestionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCollaboratorEditSuggestionsId>>,
    { id: number; data: CollaboratorEditSuggestionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCollaboratorEditSuggestionsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCollaboratorEditSuggestionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCollaboratorEditSuggestionsId>>
>;
export type PutCollaboratorEditSuggestionsIdMutationBody = CollaboratorEditSuggestionRequest;
export type PutCollaboratorEditSuggestionsIdMutationError = ErrorType<Error>;

export const usePutCollaboratorEditSuggestionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCollaboratorEditSuggestionsId>>,
    TError,
    { id: number; data: CollaboratorEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutCollaboratorEditSuggestionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCollaboratorEditSuggestionsId = (
  id: number,
  options?: SecondParameter<typeof API>,
) => {
  return API<number>({ url: `/collaborator-edit-suggestions/${id}`, method: "delete" }, options);
};

export const getDeleteCollaboratorEditSuggestionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCollaboratorEditSuggestionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCollaboratorEditSuggestionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCollaboratorEditSuggestionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCollaboratorEditSuggestionsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCollaboratorEditSuggestionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCollaboratorEditSuggestionsId>>
>;

export type DeleteCollaboratorEditSuggestionsIdMutationError = ErrorType<Error>;

export const useDeleteCollaboratorEditSuggestionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCollaboratorEditSuggestionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteCollaboratorEditSuggestionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
