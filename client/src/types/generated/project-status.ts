/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetProjectStatusesIdParams,
  GetProjectStatusesParams,
  ProjectStatusListResponse,
  ProjectStatusRequest,
  ProjectStatusResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getProjectStatuses = (
  params?: GetProjectStatusesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ProjectStatusListResponse>(
    { url: `/project-statuses`, method: "get", params, signal },
    options,
  );
};

export const getGetProjectStatusesQueryKey = (params?: GetProjectStatusesParams) => {
  return [`/project-statuses`, ...(params ? [params] : [])] as const;
};

export const getGetProjectStatusesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectStatuses>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectStatuses>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectStatuses>>> = ({ signal }) =>
    getProjectStatuses(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectStatusesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectStatuses>>
>;
export type GetProjectStatusesQueryError = ErrorType<Error>;

export const useGetProjectStatuses = <
  TData = Awaited<ReturnType<typeof getProjectStatuses>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectStatuses>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectStatusesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postProjectStatuses = (
  projectStatusRequest: ProjectStatusRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ProjectStatusResponse>(
    {
      url: `/project-statuses`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: projectStatusRequest,
    },
    options,
  );
};

export const getPostProjectStatusesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectStatuses>>,
    TError,
    { data: ProjectStatusRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProjectStatuses>>,
  TError,
  { data: ProjectStatusRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProjectStatuses>>,
    { data: ProjectStatusRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postProjectStatuses(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProjectStatusesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProjectStatuses>>
>;
export type PostProjectStatusesMutationBody = ProjectStatusRequest;
export type PostProjectStatusesMutationError = ErrorType<Error>;

export const usePostProjectStatuses = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectStatuses>>,
    TError,
    { data: ProjectStatusRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostProjectStatusesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getProjectStatusesId = (
  id: number,
  params?: GetProjectStatusesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ProjectStatusResponse>(
    { url: `/project-statuses/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetProjectStatusesIdQueryKey = (
  id: number,
  params?: GetProjectStatusesIdParams,
) => {
  return [`/project-statuses/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetProjectStatusesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectStatusesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetProjectStatusesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectStatusesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectStatusesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectStatusesId>>> = ({ signal }) =>
    getProjectStatusesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectStatusesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectStatusesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectStatusesId>>
>;
export type GetProjectStatusesIdQueryError = ErrorType<Error>;

export const useGetProjectStatusesId = <
  TData = Awaited<ReturnType<typeof getProjectStatusesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetProjectStatusesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectStatusesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectStatusesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putProjectStatusesId = (
  id: number,
  projectStatusRequest: ProjectStatusRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ProjectStatusResponse>(
    {
      url: `/project-statuses/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: projectStatusRequest,
    },
    options,
  );
};

export const getPutProjectStatusesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectStatusesId>>,
    TError,
    { id: number; data: ProjectStatusRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProjectStatusesId>>,
  TError,
  { id: number; data: ProjectStatusRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProjectStatusesId>>,
    { id: number; data: ProjectStatusRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putProjectStatusesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProjectStatusesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProjectStatusesId>>
>;
export type PutProjectStatusesIdMutationBody = ProjectStatusRequest;
export type PutProjectStatusesIdMutationError = ErrorType<Error>;

export const usePutProjectStatusesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectStatusesId>>,
    TError,
    { id: number; data: ProjectStatusRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutProjectStatusesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteProjectStatusesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/project-statuses/${id}`, method: "delete" }, options);
};

export const getDeleteProjectStatusesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectStatusesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProjectStatusesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProjectStatusesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteProjectStatusesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProjectStatusesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProjectStatusesId>>
>;

export type DeleteProjectStatusesIdMutationError = ErrorType<Error>;

export const useDeleteProjectStatusesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectStatusesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteProjectStatusesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
