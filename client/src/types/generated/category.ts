/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CategoryListResponse,
  CategoryRequest,
  CategoryResponse,
  Error,
  GetCategoriesIdParams,
  GetCategoriesParams,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getCategories = (
  params?: GetCategoriesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CategoryListResponse>({ url: `/categories`, method: "get", params, signal }, options);
};

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams) => {
  return [`/categories`, ...(params ? [params] : [])] as const;
};

export const getGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({ signal }) =>
    getCategories(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>;
export type GetCategoriesQueryError = ErrorType<Error>;

export const useGetCategories = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCategories = (
  categoryRequest: CategoryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CategoryResponse>(
    {
      url: `/categories`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: categoryRequest,
    },
    options,
  );
};

export const getPostCategoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCategories>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCategories>>,
    { data: CategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCategories(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCategories>>>;
export type PostCategoriesMutationBody = CategoryRequest;
export type PostCategoriesMutationError = ErrorType<Error>;

export const usePostCategories = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCategoriesId = (
  id: number,
  params?: GetCategoriesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<CategoryResponse>(
    { url: `/categories/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetCategoriesIdQueryKey = (id: number, params?: GetCategoriesIdParams) => {
  return [`/categories/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesId>>> = ({ signal }) =>
    getCategoriesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesId>>>;
export type GetCategoriesIdQueryError = ErrorType<Error>;

export const useGetCategoriesId = <
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCategoriesId = (
  id: number,
  categoryRequest: CategoryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<CategoryResponse>(
    {
      url: `/categories/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: categoryRequest,
    },
    options,
  );
};

export const getPutCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCategoriesId>>,
  TError,
  { id: number; data: CategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCategoriesId>>,
    { id: number; data: CategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCategoriesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCategoriesId>>
>;
export type PutCategoriesIdMutationBody = CategoryRequest;
export type PutCategoriesIdMutationError = ErrorType<Error>;

export const usePutCategoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCategoriesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/categories/${id}`, method: "delete" }, options);
};

export const getDeleteCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCategoriesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategoriesId>>
>;

export type DeleteCategoriesIdMutationError = ErrorType<Error>;

export const useDeleteCategoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
