/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetProjectFieldMetadataParams,
  ProjectFieldMetadataRequest,
  ProjectFieldMetadataResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getProjectFieldMetadata = (
  params?: GetProjectFieldMetadataParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ProjectFieldMetadataResponse>(
    { url: `/project-field-metadata`, method: "get", params, signal },
    options,
  );
};

export const getGetProjectFieldMetadataQueryKey = (params?: GetProjectFieldMetadataParams) => {
  return [`/project-field-metadata`, ...(params ? [params] : [])] as const;
};

export const getGetProjectFieldMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectFieldMetadata>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectFieldMetadataParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectFieldMetadata>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectFieldMetadataQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectFieldMetadata>>> = ({
    signal,
  }) => getProjectFieldMetadata(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectFieldMetadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectFieldMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectFieldMetadata>>
>;
export type GetProjectFieldMetadataQueryError = ErrorType<Error>;

export const useGetProjectFieldMetadata = <
  TData = Awaited<ReturnType<typeof getProjectFieldMetadata>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectFieldMetadataParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectFieldMetadata>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectFieldMetadataQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putProjectFieldMetadata = (
  projectFieldMetadataRequest: ProjectFieldMetadataRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ProjectFieldMetadataResponse>(
    {
      url: `/project-field-metadata`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: projectFieldMetadataRequest,
    },
    options,
  );
};

export const getPutProjectFieldMetadataMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectFieldMetadata>>,
    TError,
    { data: ProjectFieldMetadataRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProjectFieldMetadata>>,
  TError,
  { data: ProjectFieldMetadataRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProjectFieldMetadata>>,
    { data: ProjectFieldMetadataRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putProjectFieldMetadata(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProjectFieldMetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProjectFieldMetadata>>
>;
export type PutProjectFieldMetadataMutationBody = ProjectFieldMetadataRequest;
export type PutProjectFieldMetadataMutationError = ErrorType<Error>;

export const usePutProjectFieldMetadata = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectFieldMetadata>>,
    TError,
    { data: ProjectFieldMetadataRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutProjectFieldMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteProjectFieldMetadata = (options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/project-field-metadata`, method: "delete" }, options);
};

export const getDeleteProjectFieldMetadataMutationOptions = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectFieldMetadata>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProjectFieldMetadata>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProjectFieldMetadata>>,
    TVariables
  > = () => {
    return deleteProjectFieldMetadata(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProjectFieldMetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProjectFieldMetadata>>
>;

export type DeleteProjectFieldMetadataMutationError = ErrorType<Error>;

export const useDeleteProjectFieldMetadata = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectFieldMetadata>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteProjectFieldMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
