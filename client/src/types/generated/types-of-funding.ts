/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetTypesOfFundingsIdParams,
  GetTypesOfFundingsParams,
  TypesOfFundingListResponse,
  TypesOfFundingRequest,
  TypesOfFundingResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getTypesOfFundings = (
  params?: GetTypesOfFundingsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<TypesOfFundingListResponse>(
    { url: `/types-of-fundings`, method: "get", params, signal },
    options,
  );
};

export const getGetTypesOfFundingsQueryKey = (params?: GetTypesOfFundingsParams) => {
  return [`/types-of-fundings`, ...(params ? [params] : [])] as const;
};

export const getGetTypesOfFundingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTypesOfFundings>>,
  TError = ErrorType<Error>,
>(
  params?: GetTypesOfFundingsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTypesOfFundings>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTypesOfFundingsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTypesOfFundings>>> = ({ signal }) =>
    getTypesOfFundings(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTypesOfFundings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTypesOfFundingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTypesOfFundings>>
>;
export type GetTypesOfFundingsQueryError = ErrorType<Error>;

export const useGetTypesOfFundings = <
  TData = Awaited<ReturnType<typeof getTypesOfFundings>>,
  TError = ErrorType<Error>,
>(
  params?: GetTypesOfFundingsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTypesOfFundings>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTypesOfFundingsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postTypesOfFundings = (
  typesOfFundingRequest: TypesOfFundingRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<TypesOfFundingResponse>(
    {
      url: `/types-of-fundings`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: typesOfFundingRequest,
    },
    options,
  );
};

export const getPostTypesOfFundingsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTypesOfFundings>>,
    TError,
    { data: TypesOfFundingRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTypesOfFundings>>,
  TError,
  { data: TypesOfFundingRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTypesOfFundings>>,
    { data: TypesOfFundingRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postTypesOfFundings(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTypesOfFundingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTypesOfFundings>>
>;
export type PostTypesOfFundingsMutationBody = TypesOfFundingRequest;
export type PostTypesOfFundingsMutationError = ErrorType<Error>;

export const usePostTypesOfFundings = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTypesOfFundings>>,
    TError,
    { data: TypesOfFundingRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostTypesOfFundingsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getTypesOfFundingsId = (
  id: number,
  params?: GetTypesOfFundingsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<TypesOfFundingResponse>(
    { url: `/types-of-fundings/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetTypesOfFundingsIdQueryKey = (
  id: number,
  params?: GetTypesOfFundingsIdParams,
) => {
  return [`/types-of-fundings/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetTypesOfFundingsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTypesOfFundingsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetTypesOfFundingsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTypesOfFundingsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTypesOfFundingsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTypesOfFundingsId>>> = ({ signal }) =>
    getTypesOfFundingsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTypesOfFundingsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTypesOfFundingsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTypesOfFundingsId>>
>;
export type GetTypesOfFundingsIdQueryError = ErrorType<Error>;

export const useGetTypesOfFundingsId = <
  TData = Awaited<ReturnType<typeof getTypesOfFundingsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetTypesOfFundingsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTypesOfFundingsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTypesOfFundingsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putTypesOfFundingsId = (
  id: number,
  typesOfFundingRequest: TypesOfFundingRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<TypesOfFundingResponse>(
    {
      url: `/types-of-fundings/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: typesOfFundingRequest,
    },
    options,
  );
};

export const getPutTypesOfFundingsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTypesOfFundingsId>>,
    TError,
    { id: number; data: TypesOfFundingRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTypesOfFundingsId>>,
  TError,
  { id: number; data: TypesOfFundingRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTypesOfFundingsId>>,
    { id: number; data: TypesOfFundingRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putTypesOfFundingsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTypesOfFundingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTypesOfFundingsId>>
>;
export type PutTypesOfFundingsIdMutationBody = TypesOfFundingRequest;
export type PutTypesOfFundingsIdMutationError = ErrorType<Error>;

export const usePutTypesOfFundingsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTypesOfFundingsId>>,
    TError,
    { id: number; data: TypesOfFundingRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutTypesOfFundingsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteTypesOfFundingsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/types-of-fundings/${id}`, method: "delete" }, options);
};

export const getDeleteTypesOfFundingsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTypesOfFundingsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTypesOfFundingsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTypesOfFundingsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTypesOfFundingsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTypesOfFundingsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTypesOfFundingsId>>
>;

export type DeleteTypesOfFundingsIdMutationError = ErrorType<Error>;

export const useDeleteTypesOfFundingsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTypesOfFundingsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteTypesOfFundingsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
