/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetOtherToolsCategoriesIdParams,
  GetOtherToolsCategoriesParams,
  OtherToolsCategoryListResponse,
  OtherToolsCategoryRequest,
  OtherToolsCategoryResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getOtherToolsCategories = (
  params?: GetOtherToolsCategoriesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<OtherToolsCategoryListResponse>(
    { url: `/other-tools-categories`, method: "get", params, signal },
    options,
  );
};

export const getGetOtherToolsCategoriesQueryKey = (params?: GetOtherToolsCategoriesParams) => {
  return [`/other-tools-categories`, ...(params ? [params] : [])] as const;
};

export const getGetOtherToolsCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getOtherToolsCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetOtherToolsCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOtherToolsCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOtherToolsCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOtherToolsCategories>>> = ({
    signal,
  }) => getOtherToolsCategories(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOtherToolsCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetOtherToolsCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOtherToolsCategories>>
>;
export type GetOtherToolsCategoriesQueryError = ErrorType<Error>;

export const useGetOtherToolsCategories = <
  TData = Awaited<ReturnType<typeof getOtherToolsCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetOtherToolsCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOtherToolsCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOtherToolsCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postOtherToolsCategories = (
  otherToolsCategoryRequest: OtherToolsCategoryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<OtherToolsCategoryResponse>(
    {
      url: `/other-tools-categories`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: otherToolsCategoryRequest,
    },
    options,
  );
};

export const getPostOtherToolsCategoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOtherToolsCategories>>,
    TError,
    { data: OtherToolsCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOtherToolsCategories>>,
  TError,
  { data: OtherToolsCategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOtherToolsCategories>>,
    { data: OtherToolsCategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postOtherToolsCategories(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOtherToolsCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOtherToolsCategories>>
>;
export type PostOtherToolsCategoriesMutationBody = OtherToolsCategoryRequest;
export type PostOtherToolsCategoriesMutationError = ErrorType<Error>;

export const usePostOtherToolsCategories = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOtherToolsCategories>>,
    TError,
    { data: OtherToolsCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostOtherToolsCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getOtherToolsCategoriesId = (
  id: number,
  params?: GetOtherToolsCategoriesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<OtherToolsCategoryResponse>(
    { url: `/other-tools-categories/${id}`, method: "get", params, signal },
    options,
  );
};

export const getGetOtherToolsCategoriesIdQueryKey = (
  id: number,
  params?: GetOtherToolsCategoriesIdParams,
) => {
  return [`/other-tools-categories/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetOtherToolsCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOtherToolsCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetOtherToolsCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOtherToolsCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOtherToolsCategoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOtherToolsCategoriesId>>> = ({
    signal,
  }) => getOtherToolsCategoriesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOtherToolsCategoriesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetOtherToolsCategoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOtherToolsCategoriesId>>
>;
export type GetOtherToolsCategoriesIdQueryError = ErrorType<Error>;

export const useGetOtherToolsCategoriesId = <
  TData = Awaited<ReturnType<typeof getOtherToolsCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetOtherToolsCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOtherToolsCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOtherToolsCategoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putOtherToolsCategoriesId = (
  id: number,
  otherToolsCategoryRequest: OtherToolsCategoryRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<OtherToolsCategoryResponse>(
    {
      url: `/other-tools-categories/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: otherToolsCategoryRequest,
    },
    options,
  );
};

export const getPutOtherToolsCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOtherToolsCategoriesId>>,
    TError,
    { id: number; data: OtherToolsCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putOtherToolsCategoriesId>>,
  TError,
  { id: number; data: OtherToolsCategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putOtherToolsCategoriesId>>,
    { id: number; data: OtherToolsCategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putOtherToolsCategoriesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutOtherToolsCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putOtherToolsCategoriesId>>
>;
export type PutOtherToolsCategoriesIdMutationBody = OtherToolsCategoryRequest;
export type PutOtherToolsCategoriesIdMutationError = ErrorType<Error>;

export const usePutOtherToolsCategoriesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOtherToolsCategoriesId>>,
    TError,
    { id: number; data: OtherToolsCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutOtherToolsCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteOtherToolsCategoriesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/other-tools-categories/${id}`, method: "delete" }, options);
};

export const getDeleteOtherToolsCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOtherToolsCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOtherToolsCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOtherToolsCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteOtherToolsCategoriesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOtherToolsCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOtherToolsCategoriesId>>
>;

export type DeleteOtherToolsCategoriesIdMutationError = ErrorType<Error>;

export const useDeleteOtherToolsCategoriesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOtherToolsCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteOtherToolsCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
