/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Error,
  GetProjectEditSuggestionsParams,
  ProjectEditSuggestionListResponse,
  ProjectEditSuggestionRequest,
  ProjectEditSuggestionResponse,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getProjectEditSuggestions = (
  params?: GetProjectEditSuggestionsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ProjectEditSuggestionListResponse>(
    { url: `/project-edit-suggestions`, method: "get", params, signal },
    options,
  );
};

export const getGetProjectEditSuggestionsQueryKey = (params?: GetProjectEditSuggestionsParams) => {
  return [`/project-edit-suggestions`, ...(params ? [params] : [])] as const;
};

export const getGetProjectEditSuggestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectEditSuggestions>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectEditSuggestionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectEditSuggestions>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectEditSuggestionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectEditSuggestions>>> = ({
    signal,
  }) => getProjectEditSuggestions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectEditSuggestions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectEditSuggestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectEditSuggestions>>
>;
export type GetProjectEditSuggestionsQueryError = ErrorType<Error>;

export const useGetProjectEditSuggestions = <
  TData = Awaited<ReturnType<typeof getProjectEditSuggestions>>,
  TError = ErrorType<Error>,
>(
  params?: GetProjectEditSuggestionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectEditSuggestions>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectEditSuggestionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postProjectEditSuggestions = (
  projectEditSuggestionRequest: ProjectEditSuggestionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ProjectEditSuggestionResponse>(
    {
      url: `/project-edit-suggestions`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: projectEditSuggestionRequest,
    },
    options,
  );
};

export const getPostProjectEditSuggestionsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectEditSuggestions>>,
    TError,
    { data: ProjectEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProjectEditSuggestions>>,
  TError,
  { data: ProjectEditSuggestionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProjectEditSuggestions>>,
    { data: ProjectEditSuggestionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postProjectEditSuggestions(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProjectEditSuggestionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProjectEditSuggestions>>
>;
export type PostProjectEditSuggestionsMutationBody = ProjectEditSuggestionRequest;
export type PostProjectEditSuggestionsMutationError = ErrorType<Error>;

export const usePostProjectEditSuggestions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProjectEditSuggestions>>,
    TError,
    { data: ProjectEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostProjectEditSuggestionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getProjectEditSuggestionsId = (
  id: number,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ProjectEditSuggestionResponse>(
    { url: `/project-edit-suggestions/${id}`, method: "get", signal },
    options,
  );
};

export const getGetProjectEditSuggestionsIdQueryKey = (id: number) => {
  return [`/project-edit-suggestions/${id}`] as const;
};

export const getGetProjectEditSuggestionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectEditSuggestionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectEditSuggestionsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectEditSuggestionsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectEditSuggestionsId>>> = ({
    signal,
  }) => getProjectEditSuggestionsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectEditSuggestionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProjectEditSuggestionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectEditSuggestionsId>>
>;
export type GetProjectEditSuggestionsIdQueryError = ErrorType<Error>;

export const useGetProjectEditSuggestionsId = <
  TData = Awaited<ReturnType<typeof getProjectEditSuggestionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProjectEditSuggestionsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProjectEditSuggestionsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putProjectEditSuggestionsId = (
  id: number,
  projectEditSuggestionRequest: ProjectEditSuggestionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<ProjectEditSuggestionResponse>(
    {
      url: `/project-edit-suggestions/${id}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: projectEditSuggestionRequest,
    },
    options,
  );
};

export const getPutProjectEditSuggestionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectEditSuggestionsId>>,
    TError,
    { id: number; data: ProjectEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProjectEditSuggestionsId>>,
  TError,
  { id: number; data: ProjectEditSuggestionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProjectEditSuggestionsId>>,
    { id: number; data: ProjectEditSuggestionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putProjectEditSuggestionsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProjectEditSuggestionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProjectEditSuggestionsId>>
>;
export type PutProjectEditSuggestionsIdMutationBody = ProjectEditSuggestionRequest;
export type PutProjectEditSuggestionsIdMutationError = ErrorType<Error>;

export const usePutProjectEditSuggestionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProjectEditSuggestionsId>>,
    TError,
    { id: number; data: ProjectEditSuggestionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutProjectEditSuggestionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteProjectEditSuggestionsId = (
  id: number,
  options?: SecondParameter<typeof API>,
) => {
  return API<number>({ url: `/project-edit-suggestions/${id}`, method: "delete" }, options);
};

export const getDeleteProjectEditSuggestionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectEditSuggestionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProjectEditSuggestionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProjectEditSuggestionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteProjectEditSuggestionsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProjectEditSuggestionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProjectEditSuggestionsId>>
>;

export type DeleteProjectEditSuggestionsIdMutationError = ErrorType<Error>;

export const useDeleteProjectEditSuggestionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectEditSuggestionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteProjectEditSuggestionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
